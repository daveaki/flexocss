@mixin positioningAndFilling()
{
    .position-relative
    {
        position: relative;
    }
    .position-absolute
    {
        position: absolute
    }
    .position-fixed
    {
        position: fixed
    }
    .top-left
    {
        top: 0;
        left: 0;
    }
    .top-right
    {
        top: 0;
        right: 0;
    }
    .bottom-left
    {
        bottom: 0;
        left: 0;
    }
    .bottom-right
    {
        bottom: 0;
        right: 0;
    }
    .no-padding
    {
        padding: 0;
    }
    .no-margin
    {
        margin: 0;
    }
    .fill-vp
    {
        width: 100vw;
        height: 100vh;
    }
    .fill-vp-h
    {
        width: 100vw;
    }
    .fill-vp-v
    {
        height: 100vh;
    }
    .fill
    {
        width: 100%;
        height: 100%;
    }
    .fill-width
    {
        width: 100%;
    }
    .fill-height
    {
        height: 100%;
    }
}
@mixin text()
{
    .text-left
    {
        text-align: left;
    }
    .text-center
    {
        text-align: center
    }
    .text-right
    {
        text-align: right;
    }
    .text-justify
    {
        text-align: justify;
    }
}
@mixin images()
{
    img
    {

        &.align-center
        {
            margin: auto;
        }
        &.block
        {
            display: block;
        }
        &.align-left
        {
            margin-right: auto;
            margin-left: 0;
        }
        &.align-right
        {
            margin-right: 0;
            margin-left: auto;
        }
    }
}

/*###########scaffoling###########*/

@mixin boxMediaQuery($b)
{

    @for $i from 1 through $box
    {

        @for $y from 0 through $gap_number
        {
            $the_step: $y*$gap_step;
            .row.gap-#{nth($bp,$b)}-#{$the_step},
            {
                $gap_m: #{calc(($box/$i - 1) * $the_step/($box/$i))}px;
                >{
                    .fl-#{nth($bp,$b)}-#{$i}{
                        width: calc(  ((100% / $box) * $i) - $gap_m);
                        flex: inherit;
                    }
                }
                >{
                    .fl-flex-#{nth($bp,$b)}-#{$i}{
                        flex: $i
                    }
                }
            }

            .row.gap-#{$the_step}
            {
                $gap_m: #{calc(($box/$i - 1) * $the_step/($box/$i))}px;
                >{
                    .fl-#{nth($bp,$b)}-#{$i}{
                        width: calc(  ((100% / $box) * $i) - $gap_m);
                        flex: inherit;
                    }
                }
                >{
                    .fl-flex-#{nth($bp,$b)}-#{$i}{
                        flex: $i
                    }
                }
            }
            .row.no-gap
            {
                >{
                    .fl-#{nth($bp,$b)}-#{$i}{
                        width: calc(  ((100% / $box) * $i));
                    }
                }
                >{
                    .fl-flex-#{nth($bp,$b)}-#{$i}{
                        flex: $i
                    }
                }
            }
        }

    }
    @for $i from 1 through $box
    {
        @for $y from 0 through $gap_number
        {
            $the_step_o: $y*$gap_step;
            .row.gap-#{nth($bp,$b)}-#{$the_step_o}
            {
                $gap_o: #{calc(($box/$i ) * $the_step_o/($box/$i))}px;
                >{
                    .fl-#{nth($bp,$b)}-offset-#{$i}{
                        margin-left: calc(  ((100% / $box) * $i) + $gap_o/ ($box/$i));
                    }
                }
                >{
                    .fl-#{nth($bp,$b)}-offset-0{
                        margin-left: 0;
                    }
                }
                >{
                    .fl-flex-#{nth($bp,$b)}-offset-#{$i}
                    {
                        flex: $i;
                        visibility: hidden
                    }
                }
                >{
                    .fl-flex-#{nth($bp,$b)}-offset-0
                    {
                        visibility: visible;
                    }
                }
            }
            .row.gap-#{$the_step_o}
            {
                $gap_o: #{calc(($box/$i ) * $the_step_o/($box/$i))}px;
                >{
                    .fl-#{nth($bp,$b)}-offset-#{$i}{
                        margin-left: calc(  ((100% / $box) * $i) + $gap_o/ ($box/$i));
                    }
                }
                >{
                    .fl-#{nth($bp,$b)}-offset-0{
                        margin-left: 0;
                    }
                }
                >{
                    .fl-flex-#{nth($bp,$b)}-offset-#{$i}
                    {
                        flex: $i;
                        visibility: hidden
                    }
                }
                >{
                    .fl-flex-#{nth($bp,$b)}-offset-0
                    {
                        visibility: visible;
                    }
                }
            }
            .row.no-gap
            {
                >{
                    .fl-#{nth($bp,$b)}-offset-#{$i}{
                        margin-left: calc(  ((100% / $box) * $i));
                    }
                }
                >{
                    .fl-#{nth($bp,$b)}-offset-0{
                        margin-left: 0;
                    }
                }
                >{
                    .fl-flex-#{nth($bp,$b)}-offset-#{$i}
                    {
                        flex: $i;
                        visibility: hidden
                    }
                }
                >{
                    .fl-flex-#{nth($bp,$b)}-offset-0
                    {
                        visibility: visible;
                    }
                }
            }
        }
    }
    @for $i from 1 through $box
    {
        .fl-#{nth($bp,$b)}-order-#{$i}
        {
            order: $i;
        }
        .fl-flex-#{nth($bp,$b)}-order-#{$i}
        {
            order: $i;
        }
    }

}

/*#############################*/

@mixin z-index()
{
    $zStart:nth($Z_index,1);
    $zEnd:nth($Z_index,2);
    @for $zStart from $zStart through $zEnd
    {
        .z-index-#{$zStart}
        {
            z-index: $zStart;
        }
    }

}
@mixin visibility($bp,$mStart)
{

    @media only screen and (min-width:$mStart)
        {
        .fl-#{$bp}-hidden
        {
            display: none;
        }
        .fl-#{$bp}-show
        {
            display: block;
        }
    }

}
@mixin flexBox()
{
    .container
    {
        width: 100%;
        margin: auto;
        &.fluid
        {
            width: 100%;
        }
    }
    .row
    {
        width: 100%;
        display: flex;
        flex-wrap: nowrap;
        @for $y from 0 through $gap_number
        {
            $the_step: $y*$gap_step;
            &.gap-#{$the_step}
            {
                gap:#{$the_step}px;
            }
            &.gap-#{nth($bp,1)}-#{$the_step}
            {
                gap:#{$the_step}px;
            }
        }
        
        &.no-padding
        {
            .fl-box,.fl-box-in
            {
                padding: 0;
            }
        }
        &.fluid
        {
            width: 100%;
        }
    }
    .justify-center
    {
        justify-content: center;
    }
    .justify-left
    {
        justify-content: flex-start;
    }
    .justify-right
    {
        justify-content: flex-end;
    }
    .space-around, .justify-around
    {
        justify-content: space-around
    }
    .space-between,  .justify-between
    {
        justify-content: space-between
    }
    .align-center
    {
        align-items: center;

    }
    .align-top,.align-start
    {
        align-items: flex-start
    }
    .align-bottom,.align-end
    {
        align-items: flex-end;

    }
    .wrap
    {
        flex-wrap: wrap
    }
    .wrap-reverse
    {
        flex-wrap: wrap-reverse
    }
    .row-reverse
    {
        flex-direction: row-reverse
    }
    
    .fl-flex
    {
        flex: 1;
        &.flex
        {
            display: flex;
        }
    }
    .fl-box
    {
        padding: $flBoxPadding;
        box-sizing: border-box;
        .align-self-top
        {
            align-self: flex-start
        }
        .align-self-center
        {
            align-self: center;
        }
        .align-self-bottom
        {
            align-self: flex-end
        }
        
        &.justify-self-right
        {
            margin-right: 0;
            margin-left: auto;
        }
        &.justify-self-left
        {
            margin-left: 0;
            margin-right: auto;
        }
        &.justify-self-center
        {
            margin-left: auto;
            margin-right: auto;
        }
        
        &.flex
        {
            display: flex;
        }
        
        

    }
    .fl-box-in
    {
        box-sizing: border-box;
        padding:$flBoxPaddingIn;
        &.no-padding
        {
            padding: 0;
        }
    }
}
@mixin height-vp-sm()
{
    @for $i from 1 through 10
    {
        .vph-#{nth($bp,1)}-#{$i*10}
        {
            min-height: $i*10vh;
        }
    }
}
@mixin height-vp-md()
{
    @for $i from 1 through 10
    {
        .vph-#{nth($bp,2)}-#{$i*10}
        {
            min-height: $i*10vh;
        }
    }
}
@mixin height-vp-lg()
{
    @for $i from 1 through 10
    {
        .vph-#{nth($bp,3)}-#{$i*10}
        {
            min-height: $i*10vh;
        }
    }
}
@mixin height-vp-sp()
{
    @for $i from 1 through 10
    {
        .vph-#{nth($bp,4)}-#{$i*10}
        {
            min-height: $i*10vh;
        }
    }
}
@mixin height-vp-mg()
{
    @for $i from 1 through 10
    {
        .vph-#{nth($bp,5)}-#{$i*10}
        {
            min-height: $i*10vh;
        }
    }
}
@mixin height-vp-ut()
{
    @for $i from 1 through 10
    {
        .vph-#{nth($bp,6)}-#{$i*10}
        {
            min-height: $i*10vh;
        }
    }
}
@mixin wireframe()
{
    @if($wireframeStatus == 1)
    {
        body
        {
            &#wireframe
            {
                outline: 1px solid $wireframeColor;
                .container
                {
                    outline: 1px solid $wireframeColorContainer
                }
                .row
                {
                    outline: 1px solid $wireframeColorRow;
                    .fl-box
                    {
                        outline: 1.5px solid $wireframeColorBBox;
                    }
                }

            }
            &#wireframe-fill
            {
                background-color: $wireframeColor;
                .row
                {
                    background-color: $wireframeColorRow;
                    .fl-box
                    {
                        background-color: $wireframeColorFBox;
                        color: $wireframeColor;
                        &.box-row
                        {
                            background-color: $wireframeColorRow;
                        }
                    }
                }
                section
                {
                    background-color: $wireframeSectionColor;
                    outline: 1px solid #ccc;
                }

            }
            @for $j from 1 through 5
            {
                &.border-#{$j}
                {
                    .fl-box
                    {
                        outline: #{$j}px solid #fff;
                    }
                }
            }
        }
    }


}






